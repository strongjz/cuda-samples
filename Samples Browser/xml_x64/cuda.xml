<entries>
<entry>
    <name>CUDA and OpenGL Interop of Images</name>
    <group>CUDA</group>
    <description><![CDATA[This sample shows how to copy CUDA image back to OpenGL using the most efficient methods.]]></description>
    <project_path>3_Imaging\simpleCUDA2GL</project_path>
    <screenshot_sm>doc/simpleCUDA2GL_sm.gif</screenshot_sm>
    <screenshot_md>doc/simpleCUDA2GL_md.gif</screenshot_md>
    <screenshot_lg>doc/simpleCUDA2GL_lg.gif</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleCUDA2GL.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,CUDA,Image Processing,Opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Performance Strategies</scope>
    <featured_date>130301</featured_date>
    <files>
        <file>data\ref_simpleCUDA2GL.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleCUDA2GL.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>
    <keyconcepts level="basic">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="simpleCUDA2GL.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>cppOverload</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to use C++ function overloading on the GPU.]]></description>
    <project_path>0_Simple\cppOverload</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cppOverload.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>130201</featured_date>
    <files>
    </files>
    <cudaapi>cudaFuncSetCacheConfig</cudaapi>
    <cudaapi>cudaFuncGetAttributes</cudaapi>
    
    <keyconcepts level="basic">C++ Function Overloading</keyconcepts>
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="cppOverload.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <gcc-compiler os="darwin" arch="i686"   file="cppOverload.cu">-arch i686</gcc-compiler>
    <gcc-compiler os="darwin" arch="x86_64" file="cppOverload.cu">-arch x86_64</gcc-compiler>
    <gcc-compiler os="linux"  arch="i686"   file="cppOverload.cu">-m32</gcc-compiler>
    <gcc-compiler os="linux"  arch="x86_64" file="cppOverload.cu">-m64</gcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cppOverload_kernel.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Quicksort (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates simple quicksort implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>0_Simple\cdpSimpleQuicksort</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpSimpleQuicksort.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>CUDA,CDP,GPGPU</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>120828</featured_date>
    <cudaapi></cudaapi>
    <keyconcepts level="advanced">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation></devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="cdpSimpleQuicksort.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cdpSimpleQuicksort.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Print (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates simple printf implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>0_Simple\cdpSimplePrint</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpSimplePrint.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>CUDA,CDP,GPGPU</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>120828</featured_date>
    <cudaapi></cudaapi>
    
    <keyconcepts level="basic">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation></devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="cdpSimplePrint.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cdpSimplePrint.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Quad Tree (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates Quad Trees implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>6_Advanced\cdpQuadtree</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpQuadtree.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>120828</featured_date>
    <cudaapi></cudaapi>
    
    <keyconcepts level="advanced">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation></devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="cdpQuadTree.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cdpQuadTree.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>LU Decomposition (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates LU Decomposition implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>6_Advanced\cdpLUDecomposition</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpLUDecomposition.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>CUDA,CDP,CUBLAS,GPGPU</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>120828</featured_date>
    <files>
    <file>settings.nvlink</file>
    </files>
    <cudaapi></cudaapi>
    
    <keyconcepts level="advanced">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
	<library>cublas</library>
	<library>cublas_device</library>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>separate</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="simpleSeparateCompilation.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleSeparateCompilation.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Bezier Line Tesselation (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates bezier tesselation of lines implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>6_Advanced\cdpBezierTessellation</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpBezierTessellation.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>120828</featured_date>
    <cudaapi></cudaapi>
    
    <keyconcepts level="advanced">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation></devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="BezierLineCDP.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>BezierLineCDP.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Advanced Quicksort (CUDA Dynamic Parallelism)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates an advanced quicksort implemented using CUDA Dynamic Parallelism.  This sample requires devices with compute capability 3.5 or higher.]]></description>
    <project_path>6_Advanced\cdpAdvancedQuicksort</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cdpAdvancedQuicksort.exe</executable>
    <minspec>KEPLER SM 3.5</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>120828</featured_date>
    <cudaapi></cudaapi>
    
    <keyconcepts level="advanced">CUDA Dynamic Parallelism</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation></devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="cdpAdvancedQuicksort.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>
    
    <nvcc-compiler file="cdpBitonicSort.cu"></nvcc-compiler>
    <sm-arch>sm35</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cdpAdvancedQuicksort.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>simpleHyperQ</name>
    <group>CUDA</group>
    <description>
		<![CDATA[This sample demonstrates the use of CUDA streams for concurrent execution of several kernels on devices which provide HyperQ (SM 3.5).  Devices without HyperQ (SM 2.0 and SM 3.0) will run a maximum of two kernels concurrently.]]></description>
    <project_path>6_Advanced\simpleHyperQ</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\HyperQ.pdf</whitepaper>
    <executable>Bin\win64\release\simpleHyperQ.exe</executable>
    <minspec>SM 1.3</minspec>
    <keywords>CUDA, Concurrent Kernels, Kepler, HyperQ</keywords>
    <scope>1:CUDA Advanced Topics, 1:Performance Strategies, 1:CUDA Systems Integration</scope>
    <featured_date>120813</featured_date>
    <files>
      <file>doc\HyperQ.pdf</file>
    </files>
    
    <keyconcepts level="advanced">CUDA Systems Integration</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="simpleHyperQ.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleHyperQ.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Bindless Texture</name>
    <group>CUDA</group>
    <description><![CDATA[This example demonstrates use of cudaSurfaceObject, cudaTextureObject, and MipMap support in CUDA.  A GPU with Compute Capability SM 3.0 is required to run the sample.]]></description>
    <project_path>2_Graphics\bindlessTexture</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\bindlessTexture.exe</executable>
    <minspec>KEPLER SM 3.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,2:Texture</scope>
    <featured_date>120710</featured_date>
    <files>
        <file>data\flower.ppm</file>
        <file>data\person.ppm</file>
        <file>data\sponge.ppm</file>
        <file>data\ref_bindlessTexture.bin</file>
    </files>
    <qatests>
       <qatest>-file=ref_bindlessTexture.bin</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Texture</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="bindlessTexture_kernel.cu"></nvcc-compiler>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Parallel Prefix Sum with Shuffle Intrinsics (SHFL_Scan)</name>
    <group>CUDA</group>
    <description><![CDATA[This example demonstrates how to use the shuffle intrinsic __shfl_up to perform a scan operation across a thread block.  A GPU with Compute Capability SM 3.0. is required to run the sample]]></description>
    <project_path>6_Advanced\shfl_scan</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\shfl_scan.exe</executable>
    <minspec>KEPLER SM 3.0</minspec>
    <keywords>GPGPU, CUDA, scan, parallel prefix sum,Data-Parallel Algorithms</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>120626</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="shfl_scan.cu"></nvcc-compiler>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>shfl_scan.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Static GPU Device Library</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates a CUDA 5.0 feature, the ability to create a GPU device static library and use it within another CUDA kernel.  This example demonstrates how to pass in a GPU device function (from the GPU device static library) as a function pointer to be called.  This sample requires devices with compute capability 2.0 or higher.]]></description>
    <project_path>0_Simple\simpleSeparateCompilation</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleSeparateCompilation.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>120620</featured_date>
    <files>
	  <file>settings.nvlink</file>
    </files>
    <cudaapi></cudaapi>
    
    <keyconcepts level="basic">Separate Compilation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>separate</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="simpleSeparateCompilation.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleSeparateCompilation.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Stereo Disparity Computation (SAD SIMD Intrinsics)</name>
    <group>CUDA</group>
    <description><![CDATA[A CUDA program that demonstrates how to compute a stereo disparity map using SIMD SAD (Sum of Absolute Difference) intrinsics.  Requires Compute Capability 2.0 or higher.]]></description>
    <project_path>3_Imaging\stereoDisparity</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc\readme.txt</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>bin\Win64\Release\stereoDisparity.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA, GPGPU, atomic</keywords>
    <scope>2:Graphics Interop,1:CUDA Advanced Topics,2:Image Processing</scope>
    <featured_date>120502</featured_date>
    <files>
        <file>data\stereo.im0.640x533.ppm</file>
        <file>data\stereo.im1.640x533.ppm</file>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Intrinsics</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="stereoDisparity_kernel.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>stereoDisparity.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple CUDA Callbacks</name>
    <group>CUDA</group>
    <description>
      <![CDATA[This sample implements multi-threaded heterogeneous computing workloads with the new CPU callbacks for CUDA streams and events introduced with CUDA 5.0.]]></description>
    <project_path>0_Simple\simpleCallback</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleCallback.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA</keywords>
    <scope>1:CUDA Basic Topics, 1:Performance Strategies</scope>
    <featured_date>120427</featured_date>
    <files>
    </files>
    <cudaapi>cudaStreamCreate</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    <cudaapi>cudaStreamAddCallback</cudaapi>	
    <cudaapi>cudaStreamDestroy</cudaapi>	
    
    <keyconcepts level="basic">CUDA Streams</keyconcepts>
    <keyconcepts level="basic">Callback Functions</keyconcepts>
    <keyconcepts level="basic">Multithreading</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleCallback.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleCallback.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
 <entry>
  <name>simpleIPC</name> 
  <owner>Nikolay Markovskiy</owner> 
  <group>CUDA</group> 
 <description>
 <![CDATA[This CUDA Runtime API sample is a very basic sample that demonstrates Inter Process Communication with one process per GPU for computation.  Requires Compute Capability 2.0 or higher and a Linux Operating System
  ]]> 
	</description>
	<project_path>0_Simple\simpleIPC</project_path> 
	<screenshot_sm /> 
	<screenshot_md /> 
	<screenshot_lg /> 
	<userguide/> 
	<video /> 
	<whitepaper /> 
	<executable>Bin\win64\release\simpleIPC.exe</executable> 
	<minspec>SM 2.0</minspec>
	<keywords>GPGPU</keywords> 
	<scope>1:CUDA Basic Topics,1:CUDA Systems Integration</scope> 
	<featured_date>120315</featured_date> 
    <cudaapi>cudaIpcGetEventHandlet</cudaapi>
    <cudaapi>cudaIpcOpenMemHandle</cudaapi>
    <cudaapi>cudaIpcCloseMemHandle</cudaapi>
    <cudaapi>cudaFreeHost</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">CUDA Systems Integration</keyconcepts>
    <keyconcepts level="basic">Peer to Peer</keyconcepts>
    <keyconcepts level="basic">InterProcess Communication</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="linux"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleIPC.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleIPC.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686</supported-env>
  </entry>
<entry>
    <name>CUDA Segmentation Tree Thrust Library</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates an approach to the image segmentation trees construction.  This method is based on Boruvka's MST algorithm.]]></description>
    <project_path>6_Advanced\segmentationTreeThrust</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\segmentationTreeThrust.exe</executable>
    <minspec>SM 1.3</minspec>
    <keywords>GPGPU,Sorting</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>120208</featured_date>
    <files>
        <file>data\test.ppm</file>
        <file>data\ref_00.ppm</file>
        <file>data\ref_09.ppm</file>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="segmentationTree.cu"></nvcc-compiler>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>segmentationTree.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
 <entry>
  <name>simpleAssert</name> 
  <owner>Priyanka Sah</owner> 
  <group>CUDA</group> 
 <description>
 <![CDATA[This CUDA Runtime API sample is a very basic sample that implements how to use the assert function in the device code. Requires Compute Capability 2.0 .
  ]]> 
	</description>
	<project_path>0_Simple\simpleAssert</project_path> 
	<screenshot_sm /> 
	<screenshot_md /> 
	<screenshot_lg /> 
	<userguide/> 
	<video /> 
	<whitepaper /> 
	<executable>Bin\win64\release\simpleAssert.exe</executable> 
	<minspec>SM 2.0</minspec>
	<keywords>GPGPU</keywords> 
	<scope>1:CUDA Basic Topics</scope> 
	<featured_date>110925</featured_date> 
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMallocHost</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaFreeHost</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Assert</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleAssert.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleAssert.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
  </entry>
<entry>
    <name>Simple Cubemap Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates how to use a new CUDA 4.1 feature to support cubemap Textures in CUDA C.]]></description>
    <project_path>0_Simple\simpleCubemapTexture</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleCubemapTexture.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,3:Volume Processing</scope>
    <featured_date>110901</featured_date>
    <files></files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMalloc3DArray</cudaapi>
    <cudaapi>cudaMemcpy3D</cudaapi>
    <cudaapi>cudaCreateChannelDesc</cudaapi>
    <cudaapi>cudaBindTextureToArray</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
	<cudaapi>cudaFreeArray</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Texture</keyconcepts>
    <keyconcepts level="basic">Volume Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleCubemapTexture.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleCubemapTexture.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Volumetric Filtering with 3D Textures and Surface Writes</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates 3D Volumetric Filtering using 3D Textures and 3D Surface Writes.]]></description>
    <project_path>2_Graphics\volumeFiltering</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\volumeFiltering.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA 3D Volume Filtering</keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Graphics Interop,2:Image Processing,3:Volume Processing</scope>
    <featured_date>110826</featured_date>
    <files>
        <file>data\Bucky.raw</file>
        <file>data\ref_volumefilter.ppm</file>
    </files>
    <qatests>
       <qatest>-file=ref_volumefilter.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">3D Textures</keyconcepts>
    <keyconcepts level="advanced">Surface Writes</keyconcepts>

  <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="volumeFilter_kernel.cu"></nvcc-compiler>
    <nvcc-compiler file="volumeRender_kernel.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>volumeFiltering.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>NewDelete</name>
    <group>CUDA</group>
    <description>
		<![CDATA[This sample demonstrates dynamic global memory allocation through device C++ new and delete operators and virtual function declarations available with CUDA 4.0. ]]></description>
    <project_path>6_Advanced\newdelete</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\newdelete.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA, C++, Fermi</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>110815</featured_date>
    <files>
    </files>
    

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="newdelete.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>newdelete.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Optical Flow</name>
    <group>CUDA</group>
    <description><![CDATA[Variational optical flow estimation example.  Uses textures for image operations. Shows how simple PDE solver can be accelerated with CUDA.]]></description>
    <project_path>3_Imaging\HSOpticalFlow</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\OpticalFlow.pdf</whitepaper>
    <executable>Bin\win64\release\HSOpticalFlow.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>optical flow, motion estimation, texture, shared memory</keywords>
    <scope>1:CUDA Advanced Topics,2:Image Processing</scope>
    <featured_date>110815</featured_date>
    <files>
        <file>data\frame10.ppm</file>
        <file>data\frame11.ppm</file>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="flowCUDA.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Peer-to-Peer Transfers with Multi-GPU</name>
    <group>CUDA</group>
    <description><![CDATA[This application demonstrates the new CUDA 4.0 APIs that support Peer-To-Peer (P2P) copies, Peer-To-Peer (P2P) addressing, and UVA (Unified Virtual Memory Addressing) between multiple Tesla GPUs.]]></description>
    <project_path>0_Simple\simpleP2P</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleP2P.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA, Performance, multi-GPU support, peer to peer</keywords>
    <scope>1:CUDA Basic Topics, 1:Performance Strategies</scope>
    <featured_date>110215</featured_date>
    <files>
    </files>
    <cudaapi>cudaDeviceCanAccessPeer</cudaapi>
    <cudaapi>cudaDeviceEnablePeerAccess</cudaapi>
    <cudaapi>cudaDeviceDisablePeerAccess</cudaapi>
    <cudaapi>cudaEventCreateWithFlags</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Performance Strategies</keyconcepts>
	<keyconcepts level="basic">Asynchronous Data Transfers</keyconcepts>
	<keyconcepts level="basic">Unified Virtual Address Space</keyconcepts>
	<keyconcepts level="basic">Peer to Peer Data Transfers</keyconcepts>
	<keyconcepts level="basic">Multi-GPU</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleP2P.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleP2P.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Using Inline PTX</name>
    <group>CUDA</group>
    <description><![CDATA[A simple test application that demonstrates a new CUDA 4.0 ability to embed PTX in a CUDA kernel.]]></description>
    <project_path>0_Simple\inlinePTX</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc\alignedTypes.txt</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\inlinePTX.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA</keywords>
    <scope>1:CUDA Basic Topics, 1:Performance Strategies</scope>
    <featured_date>110202</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMallocHost</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaFreeHost</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Performance Strategies</keyconcepts>
    <keyconcepts level="basic">PTX Assembly</keyconcepts>
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="inlinePTX.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>inlinePTX.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Layered Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates how to use a new CUDA 4.0 feature to support layered Textures in CUDA C.]]></description>
    <project_path>0_Simple\simpleLayeredTexture</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleLayeredTexture.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,3:Volume Processing</scope>
    <featured_date>110201</featured_date>
    <files></files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMalloc3DArray</cudaapi>
    <cudaapi>cudaMemcpy3D</cudaapi>
    <cudaapi>cudaCreateChannelDesc</cudaapi>
    <cudaapi>cudaBindTextureToArray</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
	<cudaapi>cudaFreeArray</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Texture</keyconcepts>
    <keyconcepts level="basic">Volume Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleLayeredTexture.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleLayeredTexture.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>VFlockingD3D10</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates a CUDA mathematical simulation of group of birds behavior when in flight.]]></description>
    <project_path>5_Simulations\VFlockingD3D10</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\VFlockingD3D10.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Graphics,Simulation</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,3:Physically-Based Simulation</scope>
    <featured_date>100824</featured_date>
    <files>
      <file>data\ref_VFlockingD3D10.ppm</file>
    </files>
    <cudaapi>cudaD3D10SetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="texture_2d.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>VFlockingD3D10.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Video Encode (C Library) API</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to effectively use the CUDA Video Encoder API encode H.264 video.  Video input in YUV formats are taken as input (either CPU system or GPU memory) and video output frames are encoded to an H.264 file]]></description>
    <project_path>3_Imaging\cudaEncode</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\nvcuvenc.pdf</whitepaper>
    <executable>Bin\win64\release\cudaEncode.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,NVCUVENC,GPGPU,video</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Data Compression,2:Video Codecs</scope>
    <featured_date>100820</featured_date>
    <files>
        <file>data\1080i-h264.cfg</file>
        <file>data\1080p-h264.cfg</file>
        <file>data\720p-h264.cfg</file>
        <file>data\720x480-h264.cfg</file>
        <file>data\704x480-h264.cfg</file>
        <file>data\plush_480p_60fr.yuv</file>
        <file>enctest.bat</file>
        <file>enctest-h264.bat</file>
    </files>
    <cudaapi>CreateHWEncInterfaceInstance</cudaapi>
    <cudaapi>CreateHWEncoder</cudaapi>
    <cudaapi>GetHWEncodeCaps</cudaapi>
    <cudaapi>IsSupportedCodec</cudaapi>
    <cudaapi>IsSupportedCodecProfile</cudaapi>
    <cudaapi>IsSupportedParam</cudaapi>
    <cudaapi>EncodeFrameUT</cudaapi>
    <cudaapi>RegisterCB</cudaapi>
    <cudaapi>GetSPSPPS</cudaapi>
    <cudaapi>SetCodecType</cudaapi>
    <cudaapi>GetCodecType</cudaapi>
    <cudaapi>SetParamValue</cudaapi>
    <cudaapi>GetParamValue</cudaapi>
    <cudaapi>SetDefaultParam</cudaapi>
    <cudaapi>DestroyEncoder</cudaapi>
    <cudaapi>SetParamValue</cudaapi>
    <cudaapi>GetParamValue</cudaapi>
    <cudaapi>cuvidCtxLock</cudaapi>
    <cudaapi>cuvidCtxUnlock</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
        <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>
    <library os="windows">nvcuvid</library>
    <library os="windows">nvcuvenc</library>

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>SLI D3D10 Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates SLI with Direct3D10 Texture interoperability with CUDA.  The program creates a D3D10 Texture which is written to from a CUDA kernel. Direct3D then renders the results on the screen.  A Direct3D Capable device is required.]]></description>
    <project_path>2_Graphics\SLID3D10Texture</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\SLID3D10Texture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D,Texture</keywords>
    <scope>1:CUDA Advanced Topics,1:Performance Strategies,2:Graphics Interop,2:Texture</scope>
    <featured_date>100819</featured_date>
    <files>
      <file>data\ref_SLID3D10Texture.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_SLID3D10Texture.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D10GetDevice</cudaapi>
    <cudaapi>cudaD3D10SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D10RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">2D Textures</keyconcepts>

  <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="texture_2d.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>SLID3D10Texture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>simplePrintf</name>
    <group>CUDA</group>
    <description><![CDATA[This CUDA Runtime API sample is a very basic sample that implements how to use the printf function in the device code. Specifically, for devices with compute capability less than 2.0, the function cuPrintf is called; otherwise, printf can be used directly.
]]></description>
    <project_path>0_Simple\simplePrintf</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc/cuPrintf_readme.pdf</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simplePrintf.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>100726</featured_date>
    <files>
       <file>doc/cuPrintf_readme.htm</file>
    </files>
    <cudaapi>cudaPrintfDisplay</cudaapi>
    <cudaapi>cudaPrintfEnd</cudaapi>
	
    <keyconcepts level="basic">Debugging</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->


    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simplePrintf.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simplePrintf.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

	<no-nsight-eclipse />
</entry>
<entry>
    <name>Bilateral Filter</name>
    <group>CUDA</group>
    <description><![CDATA[Bilateral filter is an edge-preserving non-linear smoothing filter that is implemented with CUDA with OpenGL rendering. It can be used in image recovery and denoising. Each pixel is weight by considering both the spatial distance and color distance between its neighbors. Reference:"C. Tomasi, R. Manduchi, Bilateral Filtering for Gray and Color Images, proceeding of the ICCV, 1998, http://users.soe.ucsc.edu/~manduchi/Papers/ICCV98.pdf"]]></description>
    <project_path>3_Imaging\bilateralFilter</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\bilateralFilter.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,CUDA,Image Processing,box filter,opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Computer Vision</scope>
    <featured_date>100726</featured_date>
    <files>
        <file>data\nature_monte.bmp</file>
        <file>data\ref_05.ppm</file>
        <file>data\ref_06.ppm</file>
        <file>data\ref_07.ppm</file>
        <file>data\ref_08.ppm</file>
    </files>
	<qatests>
        <qatest>-radius=5 -file=ref_05.ppm</qatest>
        <qatest>-radius=6 -file=ref_06.ppm</qatest>
        <qatest>-radius=7 -file=ref_07.ppm</qatest>
        <qatest>-radius=7 -file=ref_08.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="bilateral_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>bilateralFilter.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Surface Write</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates the use of 2D surface references (Write-to-Texture)]]></description>
    <project_path>0_Simple\simpleSurfaceWrite</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleSurfaceWrite.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Image Processing</scope>
    <featured_date>100701</featured_date>
    <files>
        <file>data\ref_rotated.pgm</file>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMallocArray</cudaapi>
    <cudaapi>cudaBindSurfaceToArray</cudaapi>
    <cudaapi>cudaBindTextureToArray</cudaapi>
    <cudaapi>cudaCreateChannelDesc</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
	<cudaapi>cudaFreeArray</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Texture</keyconcepts>
	<keyconcepts level="basic">Surface Writes</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleSurfaceWrite.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleSurfaceWrite.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Function Pointers</name>
    <group>CUDA</group>
    <description><![CDATA[This sample illustrates how to use function pointers and implements the Sobel Edge Detection filter for 8-bit monochrome images.]]></description>
    <project_path>6_Advanced\FunctionPointers</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\FunctionPointers.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA, GPGPU, convolution, separable convolution,Image Processing, filter, finite impulse-response filter</keywords>
    <scope>1:CUDA Advanced Topics,2:Graphics Interop,2:Image Processing</scope>
    <featured_date>100426</featured_date>
    <files>
        <file>data\lena.pgm</file>
        <file>data\ref_orig.pgm</file>
        <file>data\ref_tex.pgm</file>
        <file>data\ref_shared.pgm</file>
    </files>
    <qatests>
        <qatest>-mode=0 -file=ref_orig.pgm</qatest>
        <qatest>-mode=1 -file=ref_tex.pgm</qatest>
        <qatest>-mode=2 -file=ref_shared.pgm</qatest>
    </qatests>
    
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="FunctionPointers_kernel.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>FunctionPointers.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Interval Computing</name>
    <group>CUDA</group>
    <description><![CDATA[Interval arithmetic operators example.  Uses various C++ features (templates and recursion).  The recursive mode requires Compute SM 2.0 capabilities.]]></description>
    <project_path>6_Advanced\interval</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\interval.exe</executable>
    <minspec>SM 1.3</minspec>
    <keywords>newdelete arithmetic, rounding modes</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>100412</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Recursion</keyconcepts>
    <keyconcepts level="advanced">Templates</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="interval.cu"></nvcc-compiler>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>interval.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple D3D11 Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates Direct3D11 Texture interoperability with CUDA.  The program creates a number of D3D11 Textures (2D, 3D, and CubeMap) which are written to from CUDA kernels. Direct3D then renders the results on the screen.  A Direct3D Capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D11Texture</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D11Texture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D,Texture</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,2:Texture</scope>
    <featured_date>100315</featured_date>
    <files>
      <file>data\ref_simpleD3D11Texture.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D11Texture.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D11GetDevice</cudaapi>
    <cudaapi>cudaD3D11SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D11RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>
    
  <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="texture_2d.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_3d.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_cube.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D11Texture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple Multi Copy and Compute</name>
    <group>CUDA</group>
    <description><![CDATA[Supported in GPUs with Compute Capability 1.1, overlapping compute with one memcopy is possible from the host system.  For Quadro and Tesla GPUs with Compute Capability 2.0, a second overlapped copy operation in either direction at full speed is possible (PCI-e is symmetric).  This sample illustrates the usage of CUDA streams to achieve overlapping of kernel execution with data copies to and from the device. 
]]></description>
    <project_path>0_Simple\simpleMultiCopy</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>bin\Win64\Release\simpleMultiCopy.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Advanced Topics,1:Performance Strategies</scope>
    <featured_date>100218</featured_date>
    <files>
        <file>doc</file>
        <file>doc\C1060_CopyOverlap.cpj</file>
        <file>doc\C1060_CopyOverlap_Session1_Context_0.csv</file>
        <file>doc\GTX480_CopyOverlap.cpj</file>
        <file>doc\GTX480_CopyOverlap_Session1_Context_0.csv</file>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>
    <keyconcepts level="basic">Asynchronous Data Transfers</keyconcepts>
    <keyconcepts level="basic">Overlap Compute and Copy</keyconcepts>
    <keyconcepts level="basic">GPU Performance</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleMultiCopy.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleMultiCopy.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Vector Addition</name>
    <group>CUDA</group>
    <description><![CDATA[This CUDA Runtime API sample is a very basic sample that implements element by element vector addition. It is the same as the sample illustrating Chapter 3 of the programming guide with some additions like error checking.]]></description>
    <project_path>0_Simple\vectorAdd</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\vectorAdd.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Linear Algebra</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <featured_date>090801</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
	<cudaapi>cudaEventSynchronize</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">CUDA Runtime API</keyconcepts>
    <keyconcepts level="basic">Vector Addition</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="vectorAdd.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>vectorAdd.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Vector Addition Driver API</name>
    <group>CUDA</group>
    <description><![CDATA[This Vector Addition sample is a basic sample that is implemented element by element.  It is the same as the sample illustrating Chapter 3 of the programming guide with some additions like error checking.   This sample also uses the new CUDA 4.0 kernel launch Driver API.]]></description>
    <project_path>0_Simple\vectorAddDrv</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\vectorAddDrv.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Linear Algebra</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <featured_date>090701</featured_date>
    <files>
      <file>data\vectorAdd_kernel32.ptx</file>
      <file>data\vectorAdd_kernel64.ptx</file>
    </files>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
	<cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemcpyHtoD</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>
    <keyconcepts level="basic">Vector Addition</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>
		
    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="vectorAdd_kernel.cu"></nvcc-compiler>
    <sm-arch></sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>vectorAddDrv.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
<entry>
    <name>Device Query</name>
    <group>CUDA</group>
    <description><![CDATA[This sample enumerates the properties of the CUDA devices present in the system.]]></description>
    <project_path>1_Utilities\deviceQuery</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\deviceQuery.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>090601</featured_date>
    <files>
    </files>
    <cudaapi>cudaSetDevice</cudaapi>
    <cudaapi>cudaGetDeviceCount</cudaapi>
    <cudaapi>cudaGetDeviceProperties</cudaapi>
    <cudaapi>cudaDriverGetVersion</cudaapi>
    <cudaapi>cudaRuntimeGetVersion</cudaapi>
    
    <keyconcepts level="basic">CUDA Runtime API</keyconcepts>
    <keyconcepts level="basic">Device Query</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>deviceQuery.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Device Query Driver API</name>
    <group>CUDA</group>
    <description><![CDATA[This sample enumerates the properties of the CUDA devices present using CUDA Driver API calls]]></description>
    <project_path>1_Utilities\deviceQueryDrv</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\deviceQueryDrv.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>090501</featured_date>
    <files>
    </files>
    <cudaapi>cuInit</cudaapi>
    <cudaapi>cuDeviceGetCount</cudaapi>
    <cudaapi>cuDeviceComputeCapability</cudaapi>
    <cudaapi>cuDriverGetVersion</cudaapi>
    <cudaapi>cuDeviceTotalMem</cudaapi>
    <cudaapi>cuDeviceGetAttribute</cudaapi>
    
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>
    <keyconcepts level="basic">Device Query</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <sm-arch></sm-arch>
 
    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>deviceQueryDrv.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Template using CUDA Runtime</name>
    <group>CUDA</group>
    <description><![CDATA[A trivial template project that can be used as a starting point to create new CUDA Runtime API projects.]]></description>
    <project_path>0_Simple\template_runtime</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\template_runtime.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>090401</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMallocHost</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaFreeHost</cudaapi>
    <cudaapi>cudaDeviceSynchronize</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    <keyconcepts level="basic">CUDA Data Transfers</keyconcepts>
    <keyconcepts level="basic">Device Memory Allocation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="template_runtime.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>template_runtime.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Template</name>
    <group>CUDA</group>
    <description><![CDATA[A trivial template project that can be used as a starting point to create new CUDA projects.]]></description>
    <project_path>0_Simple\template</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\template.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>090401</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaDeviceSynchronize</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Device Memory Allocation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="template_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>template.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>C++ Integration</name>
    <group>CUDA</group>
    <description><![CDATA[This example demonstrates how to integrate CUDA into an existing C++ application, i.e. the CUDA entry point on host side is only a function which is called from C++ code and only the file containing this function is compiled with nvcc. It also demonstrates that vector types can be used from cpp.]]></description>
    <project_path>0_Simple\cppIntegration</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\cppIntegration.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>090301</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="cppIntegration.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cppIntegration.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Bandwidth Test</name>
    <group>CUDA</group>
    <description><![CDATA[This is a simple test program to measure the memcopy bandwidth of the GPU and memcpy bandwidth across PCI-e.  This test application is capable of measuring device to device copy bandwidth, host to device copy bandwidth for pageable and page-locked memory, and device to host copy bandwidth for pageable and page-locked memory.]]></description>
    <project_path>1_Utilities\bandwidthTest</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\bandwidthTest.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,bandwidth</keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>090201</featured_date>
    <files>
    </files>
    <cudaapi>cudaSetDevice</cudaapi>
    <cudaapi>cudaHostAlloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMallocHost</cudaapi>
    <cudaapi>cudaFreeHost</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaDeviceSynchronize</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>
    <keyconcepts level="basic">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="bandwidthTest.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>bandwidthTest.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>asyncAPI</name>
    <group>CUDA</group>
    <description><![CDATA[This sample uses CUDA streams and events to overlap execution on CPU and GPU.]]></description>
    <project_path>0_Simple\asyncAPI</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\asyncAPI.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>GPGPU</keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>090101</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    <keyconcepts level="basic">Asynchronous Data Transfers</keyconcepts>
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="asyncAPI.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <gcc-compiler os="darwin" arch="i686"   file="asyncAPI.cu">-arch i686</gcc-compiler>
    <gcc-compiler os="darwin" arch="x86_64" file="asyncAPI.cu">-arch x86_64</gcc-compiler>
    <gcc-compiler os="linux"  arch="i686"   file="asyncAPI.cu">-m32</gcc-compiler>
    <gcc-compiler os="linux"  arch="x86_64" file="asyncAPI.cu">-m64</gcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>asyncAPI.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Clock</name>
    <group>CUDA</group>
    <description><![CDATA[This example shows how to use the clock function to measure the performance of kernel accurately.]]></description>
    <project_path>0_Simple\clock</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\clock.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>performance,timing,CUDA,clock,timer</keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>081201</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
        
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="clock.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>clock.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Atomic Intrinsics</name>
    <group>CUDA</group>
    <description><![CDATA[A simple demonstration of global memory atomic instructions. Requires Compute Capability 1.1 or higher.]]></description>
    <project_path>0_Simple\simpleAtomicIntrinsics</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc\readme.txt</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>bin\Win64\Release\simpleAtomicIntrinsics.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>CUDA, GPGPU, atomic</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>081101</featured_date>
    <files>
    </files>
    <cudaapi>cudaMallco</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
	<cudaapi>cudaFreeHost</cudaapi>
    
    <keyconcepts level="basic">Atomic Intrinsics</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleAtomicIntrinsics.cu"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleAtomicIntrinsics.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Pitch Linear Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Use of Pitch Linear Textures]]></description>
    <project_path>0_Simple\simplePitchLinearTexture</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simplePitchLinearTexture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,Texture</keywords>
    <scope>1:CUDA Basic Topics,2:Image Processing</scope>
    <featured_date>081001</featured_date>
    <files>
    </files>
    <cudaapi>cudaMallocPitch</cudaapi>
    <cudaapi>cudaMallocArray</cudaapi>
	<cudaapi>cudaMemcpy2D</cudaapi>
    <cudaapi>cudaMemcpyToArray</cudaapi>
    <cudaapi>cudaBindTexture2D</cudaapi>
    <cudaapi>cudaBindTextureToArray</cudaapi>
    <cudaapi>cudaCreateChannelDesc</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
	<cudaapi>cudaFreeArray</cudaapi>
    <cudaapi>cudaUnbindTexture</cudaapi>
    <cudaapi>cudaMemset2D</cudaapi>
    <cudaapi>cudaMemcpy2D</cudaapi>
    
    <keyconcepts level="basic">Texture</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simplePitchLinearTexture.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simplePitchLinearTexture.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>simpleStreams</name>
    <group>CUDA</group>
    <description><![CDATA[This sample uses CUDA streams to overlap kernel executions with memory copies between the host and a GPU device.  This sample uses a new CUDA 4.0 feature that supports pinning of generic host memory.  Requires Compute Capability 1.1 or higher.]]></description>
    <project_path>0_Simple\simpleStreams</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleStreams.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>080901</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    
    <keyconcepts level="basic">Asynchronous Data Transfers</keyconcepts>
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleStreams.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleStreams.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Templates</name>
    <group>CUDA</group>
    <description><![CDATA[This sample is a templatized version of the template project. It also shows how to correctly templatize dynamically allocated shared memory arrays.]]></description>
    <project_path>0_Simple\simpleTemplates</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleTemplates.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>080801</featured_date>
    <files>
    </files>
    <cudaapi></cudaapi>
	
    <keyconcepts level="basic">C++ Templates</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleTemplates.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleTemplates.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA C 3D FDTD</name>
    <group>CUDA</group>
    <description><![CDATA[This sample applies a finite differences time domain progression stencil on a 3D surface.]]></description>
    <project_path>6_Advanced\FDTD3d</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>bin\Win64\Release\FDTD3d.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU, CUDA, finite difference, fdtd, differential equation, pde, ode</keywords>
    <scope>1:CUDA Advanced Topics,1:Performance Strategies</scope>
    <featured_date>080709</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="src\FDTD3dGPU.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>FDTD3d.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates use of Textures in CUDA.]]></description>
    <project_path>0_Simple\simpleTexture</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleTexture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Image Processing</scope>
    <featured_date>080701</featured_date>
    <files>
        <file>data\ref_rotated.pgm</file>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaMallocArray</cudaapi>
    <cudaapi>cudaMemcpyToArray</cudaapi>
    <cudaapi>cudaCreateChannelDesc</cudaapi>
    <cudaapi>cudaBindTextureToArray</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
	<cudaapi>cudaFreeArray</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
	<keyconcepts level="basic">CUDA Runtime API</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>
	
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleTexture.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleTexture.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Texture (Driver Version)</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates use of Textures in CUDA.  This sample uses the new CUDA 4.0 kernel launch Driver API.]]></description>
    <project_path>0_Simple\simpleTextureDrv</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleTextureDrv.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Image Processing</scope>
    <featured_date>080601</featured_date>
    <files>
        <file>data\simpleTexture_kernel32.ptx</file>
        <file>data\simpleTexture_kernel64.ptx</file>
        <file>data\lena_bw.pgm</file>
        <file>data\ref_rotated.pgm</file>
    </files>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    <cudaapi>cuCtxSynchronize</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
	<cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuArrayCreate</cudaapi>
    <cudaapi>cuArrayDestroy</cudaapi>
    <cudaapi>cuCtxDetach</cudaapi>
    <cudaapi>cuMemcpy2D</cudaapi>
    <cudaapi>cuModuleGetTexRef</cudaapi>
    <cudaapi>cuTexRefSetArray</cudaapi>
    <cudaapi>cuTexRefSetAddressMode</cudaapi>
    <cudaapi>cuTexRefSetFilterMode</cudaapi>
    <cudaapi>cuTexRefSetFlags</cudaapi>
    <cudaapi>cuTexRefSetFormat</cudaapi>
    <cudaapi>cuParamSetTexRef</cudaapi>
    
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>
	<keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="simpleTexture_kernel.cu"></nvcc-compiler>
    <sm-arch></sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleTextureDrv.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
<entry>
    <name>Simple Vote Intrinsics</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates how to use the Vote (any, all) intrinsic instruction in a CUDA kernel.  Requires Compute Capability 1.2 or higher.]]></description>
    <project_path>0_Simple\simpleVoteIntrinsics</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleVoteIntrinsics.exe</executable>
    <minspec>SM 1.2</minspec>
    <keywords>CUDA, GPGPU, vote</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>080501</featured_date>
    <files>
    </files>
    <cudaapi>cudaMallco</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
	<cudaapi>cudaFreeHost</cudaapi>
    
    <keyconcepts level="basic">Vote Intrinsics</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleVoteIntrinsics.cu"></nvcc-compiler>
    <sm-arch>sm12</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleVoteIntrinsics.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>simpleZeroCopy</name>
    <group>CUDA</group>
    <description><![CDATA[This sample illustrates how to use Zero MemCopy, kernels can read and write directly to pinned system memory.  This sample requires GPUs that support this feature (MCP79 and GT200).]]></description>
    <project_path>0_Simple\simpleZeroCopy</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\CUDA2.2PinnedMemoryAPIs.pdf</whitepaper>
    <executable>Bin\win64\release\simpleZeroCopy.exe</executable>
    <minspec>SM 1.2</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies</scope>
    <featured_date>080401</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
	<cudaapi>cudaHostAlloc</cudaapi>
    <cudaapi>cudaHostGetDevicePointer</cudaapi>
    <cudaapi>cudaHostRegister</cudaapi>
	<cudaapi>cudaHostUnregister</cudaapi>
	<cudaapi>cudaFreeHost</cudaapi>
    
    <keyconcepts level="basic">Performance Strategies</keyconcepts>
    <keyconcepts level="basic">Pinned System Paged Memory</keyconcepts>
	<keyconcepts level="basic">Vector Addition</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleZeroCopy.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleZeroCopy.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Context Thread Management</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program illustrating how to the CUDA Context Management API and uses the new CUDA 4.0parameter passing and CUDA launch API.  CUDA contexts can be created separately and attached independently to different threads.]]></description>
    <project_path>6_Advanced\threadMigration</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\threadMigration.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, GPGPU, threads</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>080301</featured_date>
    <files>
      <file>data\threadMigration_kernel32.ptx</file>
      <file>data\threadMigration_kernel64.ptx</file>
    </files>
    <cudaapi>cuCtxCreate</cudaapi>
    <cudaapi>cuCtxDestroy</cudaapi>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuCtxPushCurrent</cudaapi>
    <cudaapi>cuCtxPopCurrent</cudaapi>
    
    <keyconcepts level="advanced">CUDA Driver API</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="threadMigration_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>threadMigration.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Driver API projects are not supported by the Nsight EE -->
    <no-nsight-eclipse/>
</entry>
﻿<entry>
    <name>Simple Multi-GPU</name>
    <group>CUDA</group>
    <description><![CDATA[This application demonstrates how to use the new CUDA 4.0 API for CUDA context management and multi-threaded access to run CUDA kernels on multiple-GPUs.]]></description>
    <project_path>0_Simple\simpleMultiGPU</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleMultiGPU.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Performance, multi-GPU support</keywords>
    <scope>1:CUDA Basic Topics</scope>
    <featured_date>071201</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMemcpyAsync</cudaapi>
    <keyconcepts level="basic">Asynchronous Data Transfers</keyconcepts>
    <keyconcepts level="basic">CUDA Streams and Events</keyconcepts>
	<keyconcepts level="basic">Multithreading</keyconcepts>
	<keyconcepts level="basic">Multi-GPU</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleMultiGPU.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleMultiGPU.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Direct3D9 (Vertex Arrays)</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates interoperability between CUDA and Direct3D9. The program generates a vertex array with CUDA and uses Direct3D9 to render the geometry.  A Direct3D capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D9</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D9.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop</scope>
    <featured_date>071101</featured_date>
    <files>
      <file>data\ref_simpleD3D9.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D9.ppm</qatest>
    </qatests>

    <cudaapi>cudaD3D9GetDevice</cudaapi>
    <cudaapi>cudaD3D9SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D9RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="windows">d3d9</library>
    <library os="windows">d3dx9</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">$(DXSDK_DIR)/Lib/x64</library-path>
    <library-path os="windows" arch="Win32">$(DXSDK_DIR)/Lib/x86</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="simpleD3D9_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D9.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple D3D9 Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates Direct3D9 Texture interoperability with CUDA.  The program creates a number of D3D9 Textures (2D, 3D, and CubeMap) which are written to from CUDA kernels. Direct3D then renders the results on the screen.  A Direct3D capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D9Texture</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D9Texture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D,Texture</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,2:Texture</scope>
    <featured_date>071001</featured_date>
    <files>
      <file>data\ref_simpleD3D9Texture.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D9Texture.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D9GetDevice</cudaapi>
    <cudaapi>cudaD3D9SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D9RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaMemcpy3D</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="windows">d3d9</library>
    <library os="windows">d3dx9</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">$(DXSDK_DIR)/Lib/x64</library-path>
    <library-path os="windows" arch="Win32">$(DXSDK_DIR)/Lib/x86</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="texture_2d.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_cube.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_volume.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D9Texture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple Direct3D10 (Vertex Array)</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates interoperability between CUDA and Direct3D10. The program generates a vertex array with CUDA and uses Direct3D10 to render the geometry.  A Direct3D Capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D10</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D10.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop</scope>
    <featured_date>070901</featured_date>
    <files>
      <file>data\ref_simpleD3D10.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D10.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D10GetDevice</cudaapi>
    <cudaapi>cudaD3D10SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D10RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">3D Graphics</keyconcepts>
  
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleD3D10_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D10.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple Direct3D10 Render Target</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates interop of rendertargets between Direct3D10 and CUDA. The program uses RenderTarget positions with CUDA and generates a histogram with visualization.  A Direct3D10 Capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D10RenderTarget</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D10RenderTarget.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop</scope>
    <featured_date>070801</featured_date>
    <files>
      <file>data/ref_simpleD3D10RenderTarget.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D10RenderTarget.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D10GetDevice</cudaapi>
    <cudaapi>cudaD3D10SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D10RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>

  <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleD3D10RenderTarget_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D10RenderTarget.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple D3D10 Texture</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates how to interoperate CUDA with Direct3D10 Texture.  The program creates a number of D3D10 Textures (2D, 3D, and CubeMap) which are generated from CUDA kernels. Direct3D then renders the results on the screen.  A Direct3D10 Capable device is required.]]></description>
    <project_path>2_Graphics\simpleD3D10Texture</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleD3D10Texture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>D3D,Texture</keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,2:Texture</scope>
    <featured_date>070701</featured_date>
    <files>
      <file>data\ref_simpleD3D10Texture.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_simpleD3D10Texture.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D10GetDevice</cudaapi>
    <cudaapi>cudaD3D10SetDirect3DDevice</cudaapi>
    <cudaapi>cudaGraphicsD3D10RegisterResource</cudaapi>
    <cudaapi>cudaGraphicsResourceSetMapFlags</cudaapi>
    <cudaapi>cudaGraphicsSubResourceGetMappedArray</cudaapi>
    <cudaapi>cudaMemcpy2DToArray</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="texture_2d.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_3d.cu"></nvcc-compiler>
    <nvcc-compiler file="texture_cube.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleD3D10Texture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Simple OpenGL</name>
    <group>CUDA</group>
    <description><![CDATA[Simple program which demonstrates interoperability between CUDA and OpenGL. The program modifies vertex positions with CUDA and uses OpenGL to render the geometry.]]></description>
    <project_path>2_Graphics\simpleGL</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleGL.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop</scope>
    <featured_date>070601</featured_date>
    <files>
        <file>data\ref_simpleGL.bin</file>
    </files>
    <qatests>
       <qatest>-file=ref_simpleGL.bin</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Vertex Buffers</keyconcepts>
    <keyconcepts level="basic">3D Graphics</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="simpleGL.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleGL.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Simple Texture 3D</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example that demonstrates use of 3D Textures in CUDA.]]></description>
    <project_path>2_Graphics\simpleTexture3D</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\simpleTexture3D.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Graphics Interop,2:Texture,2:Image Processing</scope>
    <featured_date>070501</featured_date>
    <files>
        <file>data\Bucky.raw</file>
        <file>data\ref_Texture3D.bin</file>
    </files>
    <qatests>
       <qatest>-file=ref_texture3D.bin</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>
    <keyconcepts level="basic">3D Textures</keyconcepts>
    <keyconcepts level="basic">Surface Writes</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="simpleTexture3D_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleTexture3D.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Matrix Multiplication (CUBLAS)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements matrix multiplication from Chapter 3 of the programming guide.
To illustrate GPU performance for matrix multiply, this sample also shows how to use the new CUDA 4.0 interface for CUBLAS to demonstrate high-performance performance for matrix multiplication.]]></description>
    <project_path>0_Simple\matrixMulCUBLAS</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\matrixMulCUBLAS.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CUBLAS,matrix multiply</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <featured_date>070301</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    <cudaapi>cublasCreate</cudaapi>
    <cudaapi>cublasSgemm</cudaapi>
    <keyconcepts level="basic">CUDA Runtime API</keyconcepts>
    <keyconcepts level="basic">Performance Strategies</keyconcepts>
    <keyconcepts level="basic">Linear Algebra</keyconcepts>
    <keyconcepts level="basic">CUBLAS</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>cublas</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <gcc-compiler></gcc-compiler>
    <gcc-compiler file="matrixMulCUBLAS.cpp"></gcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>matrixMulCUBLAS.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Matrix Multiplication (CUDA Runtime API Version)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements matrix multiplication and is exactly the same as Chapter 6 of the programming guide.
It has been written for clarity of exposition to illustrate various CUDA programming principles, not with the goal of providing the most performant generic kernel for matrix multiplication.  To illustrate GPU performance for matrix multiply, this sample also shows how to use the new CUDA 4.0 interface for CUBLAS to demonstrate high-performance performance for matrix multiplication.]]></description>
    <project_path>0_Simple\matrixMul</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\matrixMul.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,matrix multiply</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <featured_date>070301</featured_date>
    <files>
    </files>
    <cudaapi>cudaEventCreate</cudaapi>
    <cudaapi>cudaEventRecord</cudaapi>
    <cudaapi>cudaEventQuery</cudaapi>
    <cudaapi>cudaEventDestroy</cudaapi>
    <cudaapi>cudaEventElapsedTime</cudaapi>
	<cudaapi>cudaEventSynchronize</cudaapi>
	<cudaapi>cudaMalloc</cudaapi>
	<cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">CUDA Runtime API</keyconcepts>
    <keyconcepts level="basic">Linear Algebra</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>matrixMul.cu</primary-file>

    <nvcc-compiler file="matrixMul.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Matrix Multiplication (CUDA Driver API version with Dynamic Linking Version)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample revisits matrix multiplication using the CUDA driver API. 
It demonstrates how to link to CUDA driver at runtime and how to use JIT (just-in-time) compilation from PTX code.
It has been written for clarity of exposition to illustrate various CUDA programming principles, not with the goal of providing the most performant generic kernel for matrix multiplication.
CUBLAS provides high-performance matrix multiplication.]]></description>
    <project_path>6_Advanced\matrixMulDynlinkJIT</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\matrixMulDynlinkJIT.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,matrix multiply,Advanced Topics,Linear Algebra</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>070101</featured_date>
    <files>
    </files>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
	<cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemcpyHtoD</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    
    <keyconcepts level="advanced">CUDA Driver API</keyconcepts>
    <keyconcepts level="advanced">CUDA Dynamically Linked Library</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    
	<!-- Either absolute or relative to sample -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    

    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <!-- These options will be passed to GCC compiler as is and for all files -->
    <gcc-compiler os="darwin" arch="i686"   file="matrixMulDynlinkJIT.cpp">-arch i686</gcc-compiler>
    <gcc-compiler os="darwin" arch="x86_64" file="matrixMulDynlinkJIT.cpp">-arch x86_64</gcc-compiler>
    <gcc-compiler os="linux"  arch="i686"   file="matrixMulDynlinkJIT.cpp">-m32</gcc-compiler>
    <gcc-compiler os="linux"  arch="x86_64" file="matrixMulDynlinkJIT.cpp">-m64</gcc-compiler>
    <gcc-compiler file="matrixMulDynlinkJIT.cpp">-o matrixMulDrv.o -c matrixMulDrv.cpp</gcc-compiler>
	
    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>matrixMulDynlinkJIT.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
<entry>
    <name>Scalar Product</name>
    <group>CUDA</group>
    <description><![CDATA[This sample calculates scalar products of a given set of input vector pairs.]]></description>
    <project_path>6_Advanced\scalarProd</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\scalarProd.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Linear Algebra, scalar product</keywords>
    <scope>1:CUDA Basic Topics, 3:Linear Algebra</scope>
    <featured_date>061201</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Linear Algebra</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="scalarProd.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>scalarProd.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Concurrent Kernels</name>
    <group>CUDA</group>
    <description>
		<![CDATA[This sample demonstrates the use of CUDA streams for concurrent execution of several kernels on devices of compute capability 2.0 or higher.  Devices of compute capability 1.x will run the kernels sequentially.  It also illustrates how to introduce dependencies between CUDA streams with the new cudaStreamWaitEvent function introduced in CUDA 3.2]]></description>
    <project_path>6_Advanced\concurrentKernels</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\concurrentKernels.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, Concurrent Kernels, Fermi</keywords>
    <scope>1:CUDA Advanced Topics, 1:Performance Strategies</scope>
    <featured_date>061101</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="concurrentKernels.cu"></nvcc-compiler>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>concurrentKernels.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Aligned Types</name>
    <group>CUDA</group>
    <description><![CDATA[A simple test, showing huge access speed gap between aligned and misaligned structures.]]></description>
    <project_path>6_Advanced\alignedTypes</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc\alignedTypes.txt</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\alignedTypes.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA</keywords>
    <scope>1:CUDA Basic Topics, 1:Performance Strategies</scope>
    <featured_date>061101</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="alignedTypes.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>alignedTypes.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>PTX Just-in-Time compilation</name>
    <group>CUDA</group>
    <description>
      <![CDATA[This sample uses the Driver API to just-in-time compile (JIT) a Kernel from PTX code. Additionally, this sample demonstrates the seamless interoperability capability of the CUDA Runtime and CUDA Driver API calls.  For CUDA 5.5, this sample shows how to use cuLink* functions to link PTX assembly using the CUDA driver at runtime.]]></description>
    <project_path>6_Advanced\ptxjit</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\ptxjit.exe</executable>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA,Advanced Topics</keywords>
    <scope>1:CUDA Advanced Topics</scope>
    <featured_date>061001</featured_date>
    <files>
        <file>myPtx32.ptx</file>
        <file>myPtx64.ptx</file>
    </files>
    
    <keyconcepts level="advanced">CUDA Driver API</keyconcepts>
    
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>separate</devicecompilation>
    <sm-arch>sm20</sm-arch>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>ptxjit.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>DCT8x8</name>
    <group>CUDA</group>
    <description><![CDATA[ This sample demonstrates how Discrete Cosine Transform (DCT) for blocks of 8 by 8 pixels can be performed using CUDA: a naive implementation by definition and a more traditional approach used in many libraries. As opposed to implementing DCT in a fragment shader, CUDA allows for an easier and more efficient implementation. 
 ]]></description>
    <project_path>3_Imaging\dct8x8</project_path>
    <screenshot_sm>doc\barbara_sm.png</screenshot_sm>
    <screenshot_md>doc\barbara_md.png</screenshot_md>
    <screenshot_lg>doc\barbara_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\dct8x8.pdf</whitepaper>
    <executable>Bin\win64\Release\dct8x8.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, Image Processing, DCT, Discrete Cosine Transfrom</keywords>
    <scope>1:CUDA Advanced Topics, 2:Image Processing, 2:Data Compression, 2:Video Codecs, 2:Computer Vision</scope>
    <featured_date>060901</featured_date>
    <files>
        <file>data\barbara.bmp</file>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="dct8x8.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>dct8x8.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>1D Discrete Haar Wavelet Decomposition</name>
    <group>CUDA</group>
    <description><![CDATA[Discrete Haar wavelet decomposition for 1D signals with a length which is a power of 2.]]></description>
    <project_path>3_Imaging\dwtHaar1D</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\dwtHaar1D.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Advanced Topics,2:Image Processing, 2:Data Compression, 2:Video Codecs, 2:Computer Vision</scope>
    <featured_date>060801</featured_date>
    <files>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="dwtHaar1D.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>dwtHaar1D.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Eigenvalues</name>
    <group>CUDA</group>
    <description><![CDATA[The computation of all or a subset of all eigenvalues is an important problem in Linear Algebra, statistics, physics, and many other fields. This sample demonstrates a parallel implementation of a bisection algorithm for the computation of all eigenvalues of a
tridiagonal symmetric matrix of arbitrary size with CUDA.]]></description>
    <project_path>6_Advanced\eigenvalues</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\eigenvalues.pdf</whitepaper>
    <executable>Bin\win64\release\eigenvalues.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, GPGPU, Eigenvalues, Linear Algebra</keywords>
    <scope>1:CUDA Advanced Topics,3:Linear Algebra</scope>
    <featured_date>060701</featured_date>
    <files>
        <file>data\diagonal.dat</file>
        <file>data\reference.dat</file>
        <file>data\superdiagonal.dat</file>
    </files>
    
    <keyconcepts level="advanced">Linear Algebra</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="bisect_large.cu"></nvcc-compiler>
	<nvcc-compiler file="bisect_small.cu"></nvcc-compiler>
	<nvcc-compiler file="bisect_util.cu"></nvcc-compiler>
	<nvcc-compiler file="main.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Fast Walsh Transform</name>
    <group>CUDA</group>
    <description><![CDATA[Naturally(Hadamard)-ordered Fast Walsh Transform for batching vectors of arbitrary eligible lengths that are power of two in size.]]></description>
    <project_path>6_Advanced\fastWalshTransform</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\fastWalshTransform.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, DSP,Linear Algebra,dyadic convolution</keywords>
    <scope>1:CUDA Advanced Topics, 3:Linear Algebra, 1:Data-Parallel Algorithms, 2:Image Processing, 2:Data Compression, 2:Video Codecs</scope>
    <featured_date>060601</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Linear Algebra</keyconcepts>
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="fastWalshTransform.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>fastWalshTransform.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Histogram</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates efficient implementation of 64-bin and 256-bin histogram.
]]></description>
    <project_path>3_Imaging\histogram</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\histogram.pdf</whitepaper>
    <executable>bin\Win64\Release\histogram.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>CUDA,Data-Parallel Algorithms,Image Processing, histogram</keywords>
    <scope>1:CUDA Advanced Topics, 1:Data-Parallel Algorithms, 2:Image Processing, 2:Data Compression,2:Computer Vision</scope>
    <featured_date>060501</featured_date>
    <files>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="histogram64.cu"></nvcc-compiler>
    <nvcc-compiler file="histogram256.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Line of Sight</name>
    <group>CUDA</group>
    <description><![CDATA[This sample is an implementation of a simple line-of-sight algorithm: Given a height map and a ray originating at some observation point, it computes all the points along the ray that are visible from the observation point. The implementation is based on the Thrust library (http://code.google.com/p/thrust/).]]></description>
    <project_path>6_Advanced\lineOfSight</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\lineOfSight.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Line of sight,algorithm,height map,parallel scan primitive,data parallel algorithms,Computer Vision</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms</scope>
    <featured_date>060401</featured_date>
    <files>
        <file>..\..\doc\Thrust_license.txt</file>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="lineOfSight.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>lineOfSight.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Matrix Transpose</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates Matrix Transpose.  Different performance are shown to achieve high performance.]]></description>
    <project_path>6_Advanced\transpose</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\MatrixTranspose.pdf</whitepaper>
    <executable>Bin\win64\release\transpose.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,matrix,transpose</keywords>
    <scope>1:CUDA Advanced Topics,1:Performance Strategies,3:Linear Algebra</scope>
    <featured_date>060301</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>
    <keyconcepts level="advanced">Linear Algebra</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="transpose.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>transpose.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Box Filter</name>
    <group>CUDA</group>
    <description><![CDATA[Fast image box filter using CUDA with OpenGL rendering.]]></description>
    <project_path>3_Imaging\boxFilter</project_path>
    <screenshot_sm>doc/boxFilter_sm.gif</screenshot_sm>
    <screenshot_md>doc/boxFilter_md.gif</screenshot_md>
    <screenshot_lg>doc/boxFilter_lg.gif</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\boxFilter.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,CUDA,Image Processing,box filter,opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Computer Vision</scope>
    <featured_date>060201</featured_date>
    <files>
        <file>data\lenaRGB.ppm</file>
        <file>data\ref_14.ppm</file>
        <file>data\ref_22.ppm</file>
    </files>
    <qatests>
        <qatest>-radius=14 -file=ref_14.ppm</qatest>
        <qatest>-radius=22 -file=ref_22.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="boxFilter_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>boxFilter.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Post-Process in OpenGL</name>
    <group>CUDA</group>
    <description><![CDATA[This sample shows how to post-process an image rendered in OpenGL using CUDA.]]></description>
    <project_path>3_Imaging\postProcessGL</project_path>
    <screenshot_sm>doc/postProcessGL_sm.gif</screenshot_sm>
    <screenshot_md>doc/postProcessGL_md.gif</screenshot_md>
    <screenshot_lg>doc/postProcessGL_lg.gif</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\postProcessGL.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,CUDA,Image Processing, opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing</scope>
    <featured_date>060101</featured_date>
    <files>
        <file>data\teapot_orig.ppm</file>
        <file>data\teapot_2.ppm</file>
        <file>data\teapot_4.ppm</file>
        <file>data\teapot_8.ppm</file>
    </files>
    <qatests>
      <qatest>-radius=2 -file=teapot_2.ppm</qatest>
      <qatest>-radius=4 -file=teapot_4.ppm</qatest>
      <qatest>-radius=8 -file=teapot_8.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="postProcessGL.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Parallel Reduction</name>
    <group>CUDA</group>
    <description><![CDATA[A parallel sum reduction that computes the sum of a large arrays of values.  This sample demonstrates several important optimization strategies for 1:Data-Parallel Algorithms like reduction.]]></description>
    <project_path>6_Advanced\reduction</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>readme.txt</userguide>
    <video></video>
    <whitepaper>doc\reduction.pdf</whitepaper>
    <executable>Bin\win64\release\reduction.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, GPGPU, Parallel Reduction</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>051201</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="reduction_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>reduction.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Parallel Prefix Sum (Scan)</name>
    <group>CUDA</group>
    <description><![CDATA[This example demonstrates an efficient CUDA implementation of parallel prefix sum, also known as "scan".  Given an array of numbers, scan computes a new array in which each element is the sum of all the elements before it in the input array.]]></description>    <project_path>6_Advanced\scan</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\scan.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU, CUDA, scan, parallel prefix sum,Data-Parallel Algorithms</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>051101</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="scan.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>DirectX Texture Compressor (DXTC)</name>
    <group>CUDA</group>
    <description><![CDATA[High Quality DXT Compression using CUDA.

This example shows how to implement an existing computationally-intensive CPU compression algorithm in parallel on the GPU, and obtain an order of magnitude performance improvement.]]></description>
    <project_path>3_Imaging\dxtc</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\cuda_dxtc.pdf</whitepaper>
    <executable>Bin\win64\release\dxtc.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Texture Compression,DXTC,S3TC,cluster fit,power method,covariance,least squares</keywords>
    <scope>1:CUDA Advanced Topics,2:Image Processing,2:Data Compression</scope>
    <featured_date>051001</featured_date>
    <files>
        <file>data\lena-orig.ppm</file>
        <file>data\lorikeet-orig.ppm</file>
        <file>data\colors.ppm</file>
        <file>data\lena_std.ppm</file>
    </files>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Image Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="dxtc.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>dxtc.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Image denoising</name>
    <group>CUDA</group>
    <description><![CDATA[ This sample demonstrates two adaptive image denoising techniques: KNN and NLM, based on computation of both geometric and color distance between texels. While both techniques are implemented in the DirectX SDK using shaders, massively speeded up variation of the latter technique, taking advantage of shared memory, is implemented in addition to DirectX counterparts. ]]></description>
    <project_path>3_Imaging\imageDenoising</project_path>
    <screenshot_sm>doc\NLM_sm.png</screenshot_sm>
    <screenshot_md>doc\NLM_md.png</screenshot_md>
    <screenshot_lg>doc\NLM_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\imageDenoising.pdf</whitepaper>
    <executable>Bin\win64\release\imageDenoising.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Image Processing, noise reduction</keywords>
    <scope>1:CUDA Advanced Topics, 2:Image Processing,2:Computer Vision</scope>
    <featured_date>050901</featured_date>
    <files>
      <file>data\portrait_noise.bmp</file>
      <file>data\ref_passthru.ppm</file>
      <file>data\ref_knn.ppm</file>
      <file>data\ref_nlm.ppm</file>
      <file>data\ref_nlm2.ppm</file>
    </files>
    <qatests>
      <qatest>-kernel=0 -file=ref_passthru.ppm</qatest>
      <qatest>-kernel=1 -file=ref_knn.ppm</qatest>
      <qatest>-kernel=2 -file=ref_nlm.ppm</qatest>
      <qatest>-kernel=3 -file=ref_nlm2.ppm</qatest>
    </qatests>
    <keyconcepts level="advanced">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="imageDenoising.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>imageDenoising.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Sobel Filter</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements the Sobel edge detection filter for 8-bit monochrome images.]]></description>
    <project_path>3_Imaging\SobelFilter</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\SobelFilter.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, GPGPU, convolution, separable convolution, Image Processing, filter, finite impulse-response filter</keywords>
    <scope>2:Graphics Interop,2:Texture,1:CUDA Advanced Topics,2:Image Processing,2:Computer Vision</scope>
    <featured_date>050801</featured_date>
    <files>
        <file>data\lena.pgm</file>
        <file>data\ref_orig.pgm</file>
        <file>data\ref_tex.pgm</file>
        <file>data\ref_shared.pgm</file>
    </files>
	<qatests>
        <qatest>-mode=0 -file=ref_orig.pgm</qatest>
        <qatest>-mode=1 -file=ref_tex.pgm</qatest>
        <qatest>-mode=2 -file=ref_shared.pgm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="SobelFilter_kernels.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>SobelFilter.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Recursive Gaussian Filter</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements a Gaussian blur using Deriche's recursive method. The advantage of this method is that the execution time is independent of the filter width.]]></description>
    <project_path>3_Imaging\recursiveGaussian</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\recursiveGaussian.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,CUDA,Image Processing,box filter,opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Computer Vision</scope>
    <featured_date>050701</featured_date>
    <files>
      <file>data\lena.ppm</file>
      <file>data\ref_10.ppm</file>
      <file>data\ref_14.ppm</file>
      <file>data\ref_18.ppm</file>
      <file>data\ref_22.ppm</file>
    </files>
    <qatests>
      <qatest>-sigma=10 -file=ref_10.ppm</qatest>
      <qatest>-sigma=14 -file=ref_14.ppm</qatest>
      <qatest>-sigma=18 -file=ref_18.ppm</qatest>
      <qatest>-sigma=22 -file=ref_22.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>
    <library os="linux">Xi</library>
    <library os="linux">Xmu</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="recursiveGaussian_Gold.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>recursiveGaussian.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Video Decoder D3D9 API</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to efficiently use the CUDA Video Decoder API to decode MPEG-2, VC-1, or H.264 sources.  YUV to RGB conversion of video is accomplished with CUDA kernel.  The output result is rendered to a D3D9 surface.  The decoded video is not displayed on the screen, but with -displayvideo at the command line parameter, the video output can be seen.  Requires a Direct3D capable device and Compute Capability 1.1 or higher.]]></description>
    <project_path>3_Imaging\cudaDecodeD3D9</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\nvcuvid.pdf</whitepaper>
    <executable>Bin\win64\release\cudaDecodeD3D9.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>CUDA,NVCUVID,GPGPU,video,d3d</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Data Compression,2:Video Codecs,2:Computer Vision</scope>
    <featured_date>050601</featured_date>
    <files>
        <file>data\NV12ToARGB_drvapi_Win32.ptx</file>
        <file>data\NV12ToARGB_drvapi_x64.ptx</file>
        <file>data\plush1_720p_10s.m2v</file>
    </files>
    <cudaapi>cuDeviceGet</cudaapi>
    <cudaapi>cuDeviceGetAttribute</cudaapi>
    <cudaapi>cuDeviceComputeCapability</cudaapi>
    <cudaapi>cuDeviceGetCount</cudaapi>
    <cudaapi>cuDeviceGetName</cudaapi>
    <cudaapi>cuDeviceTotalMem</cudaapi>
    <cudaapi>cuD3D9CtxCreate</cudaapi>
    <cudaapi>cuD3D9GetDevice</cudaapi>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleUnload</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuModuleGetGlobal</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetTexRef</cudaapi>
    <cudaapi>cuD3D9MapResources</cudaapi>
    <cudaapi>cuD3D9UnmapResources</cudaapi>
    <cudaapi>cuD3D9RegisterResource</cudaapi>
    <cudaapi>cuD3D9UnregisterResource</cudaapi>
    <cudaapi>cuD3D9ResourceSetMapFlags</cudaapi>
    <cudaapi>cuD3D9ResourceGetMappedPointer</cudaapi>
    <cudaapi>cuD3D9ResourceGetMappedPitch</cudaapi>
    <cudaapi>cuParamSetv</cudaapi>
    <cudaapi>cuParamSeti</cudaapi>
    <cudaapi>cuParamSetSize</cudaapi>
    <cudaapi>cuLaunchGridAsync</cudaapi>
    <cudaapi>cuCtxCreate</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
    <cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemAllocHost</cudaapi>
    <cudaapi>cuMemFreeHost</cudaapi>
    <cudaapi>cuMemcpyDtoHAsync</cudaapi>
    <cudaapi>cuMemsetD8</cudaapi>
    <cudaapi>cuStreamCreate</cudaapi>
    <cudaapi>cuCtxPushCurrent</cudaapi>
    <cudaapi>cuCtxPopCurrent</cudaapi>
    <cudaapi>cuvidCreateDecoder</cudaapi>
    <cudaapi>cuvidDecodePicture</cudaapi>
    <cudaapi>cuvidMapVideoFrame</cudaapi>
    <cudaapi>cuvidUnmapVideoFrame</cudaapi>
    <cudaapi>cuvidDestroyDecoder</cudaapi>
    <cudaapi>cuvidCtxLockCreate</cudaapi>
    <cudaapi>cuvidCtxLockDestroy</cudaapi>
    <cudaapi>cuCtxDestroy</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="windows">d3d9</library>
    <library os="windows">d3dx9</library>
    <library os="windows">nvcuvid</library>
    
    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">$(DXSDK_DIR)/lib/x86</library-path>
    <library-path os="windows" arch="Win32">.$(DXSDK_DIR)/lib/Win32</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="NV12ToARGB_drvapi.cu"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>videoDecodeD3D9.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>CUDA Video Decoder GL API</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to efficiently use the CUDA Video Decoder API to decode video sources based on MPEG-2, VC-1, and H.264.  YUV to RGB conversion of video is accomplished with CUDA kernel.  The output result is rendered to a OpenGL surface.  The decoded video is black, but can be enabled with -displayvideo added to the command line.  Requires Compute Capability 1.1 or higher.]]></description>
    <project_path>3_Imaging\cudaDecodeGL</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\nvcuvid.pdf</whitepaper>
    <executable>Bin\win64\release\cudaDecodeGL.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>CUDA,NVCUVID,GPGPU,video,opengl</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Data Compression,2:Video Codecs,2:Computer Vision</scope>
    <featured_date>050501</featured_date>
    <files>
        <file>data\NV12ToARGB_drvapi_Win32.ptx</file>
        <file>data\NV12ToARGB_drvapi_x64.ptx</file>
        <file>data\plush1_720p_10s.m2v</file>
    </files>
    <cudaapi>cuDeviceGet</cudaapi>
    <cudaapi>cuDeviceGetAttribute</cudaapi>
    <cudaapi>cuDeviceComputeCapability</cudaapi>
    <cudaapi>cuDeviceGetCount</cudaapi>
    <cudaapi>cuDeviceGetName</cudaapi>
    <cudaapi>cuDeviceTotalMem</cudaapi>
    <cudaapi>cuGLCtxCreate</cudaapi>
    <cudaapi>cuGLGetDevice</cudaapi>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleUnload</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuModuleGetGlobal</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetTexRef</cudaapi>
    <cudaapi>cuGLMapResources</cudaapi>
    <cudaapi>cuGLUnmapResources</cudaapi>
    <cudaapi>cuGLRegisterResource</cudaapi>
    <cudaapi>cuGLUnregisterResource</cudaapi>
    <cudaapi>cuGLResourceSetMapFlags</cudaapi>
    <cudaapi>cuGLResourceGetMappedPointer</cudaapi>
    <cudaapi>cuGLResourceGetMappedPitch</cudaapi>
    <cudaapi>cuParamSetv</cudaapi>
    <cudaapi>cuParamSeti</cudaapi>
    <cudaapi>cuParamSetSize</cudaapi>
    <cudaapi>cuLaunchGridAsync</cudaapi>
    <cudaapi>cuCtxCreate</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
    <cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemAllocHost</cudaapi>
    <cudaapi>cuMemFreeHost</cudaapi>
    <cudaapi>cuMemcpyDtoHAsync</cudaapi>
    <cudaapi>cuMemsetD8</cudaapi>
    <cudaapi>cuStreamCreate</cudaapi>
    <cudaapi>cuCtxPushCurrent</cudaapi>
    <cudaapi>cuCtxPopCurrent</cudaapi>
    <cudaapi>cuvidCreateDecoder</cudaapi>
    <cudaapi>cuvidDecodePicture</cudaapi>
    <cudaapi>cuvidMapVideoFrame</cudaapi>
    <cudaapi>cuvidUnmapVideoFrame</cudaapi>
    <cudaapi>cuvidDestroyDecoder</cudaapi>
    <cudaapi>cuvidCtxLockCreate</cudaapi>
    <cudaapi>cuvidCtxLockDestroy</cudaapi>
    <cudaapi>cuCtxDestroy</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="windows">nvcuvid</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>
    <library os="macosx" framework="true">GLUT</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="NV12toARGB_drvapi.cu"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>videoDecodeGL.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686</supported-env>
</entry>
<entry>
    <name>Bicubic B-spline Interoplation</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to efficiently implement a Bicubic B-spline interpolation filter with CUDA texture.]]></description>
    <project_path>3_Imaging\bicubicTexture</project_path>
    <screenshot_sm>docs\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>docs\sshot_md.JPG</screenshot_md>
    <screenshot_lg>docs\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\bicubicTexture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Image Processing,2:Computer Vision</scope>
    <featured_date>050401</featured_date>
    <files>
        <file>data\lena_bw.raw</file>
        <file>data\0_nearest.ppm</file>
        <file>data\1_bilinear.ppm</file>
        <file>data\2_bicubic.ppm</file>
        <file>data\3_fastbicubic.ppm</file>
        <file>data\4_catmull-rom.ppm</file>
    </files>
	<qatests>
        <qatest>-mode=0 -file=0_nearest.ppm</qatest>
        <qatest>-mode=1 -file=1_bilinear.ppm</qatest>
        <qatest>-mode=2 -file=2_bicubic.ppm</qatest>
        <qatest>-mode=3 -file=3_fastbicubic.ppm</qatest>
        <qatest>-mode=4 -file=4_catmull-rom.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="bicubicTexture_cuda.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>bicubicTexture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Fluids (Direct3D Version)</name>
    <group>CUDA</group>
    <description><![CDATA[An example of fluid simulation using CUDA and CUFFT, with Direct3D 9 rendering.  A Direct3D Capable device is required.]]></description>
    <project_path>5_Simulations\fluidsD3D9</project_path>
    <screenshot_sm>doc\fluidsD3D9_sm.gif</screenshot_sm>
    <screenshot_md>doc\fluidsD3D9_md.gif</screenshot_md>
    <screenshot_lg>doc\fluidsD3D9_lg.gif</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\fluidsD3D9.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CUFFT,GPGPU,Fluid Simulation,FFT</keywords>
    <scope>2:Graphics Interop,1:CUDA Advanced Topics,3:Physically-Based Simulation</scope>
    <featured_date>050301</featured_date>
    <files>
      <file>data\ref_fluidsD3D9.ppm</file>
    </files>
    <qatests>
       <qatest>-file=ref_fluidsD3D9.ppm</qatest>
    </qatests>
    <cudaapi>cudaD3D9SetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">CUFFT Library</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="windows">d3d9</library>
    <library os="windows">d3dx9</library>
	<library>cufft</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">$(DXSDK_DIR)/Lib/x64</library-path>
    <library-path os="windows" arch="Win32">$(DXSDK_DIR)/Lib/x86</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="fluidsD3D9_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>fluidsD3D9.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
<entry>
    <name>Fluids (OpenGL Version)</name>
    <group>CUDA</group>
    <description><![CDATA[An example of fluid simulation using CUDA and CUFFT, with OpenGL rendering.]]></description>
    <project_path>5_Simulations\fluidsGL</project_path>
    <screenshot_sm>doc\fluidsGL_sm.gif</screenshot_sm>
    <screenshot_md>doc\fluidsGL_md.gif</screenshot_md>
    <screenshot_lg>doc\fluidsGL_lg.gif</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\fluidsGL.pdf</whitepaper>
    <executable>Bin\win64\release\fluidsGL.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CUFFT,GPGPU,Fluid Simulation,FFT</keywords>
    <scope>2:Graphics Interop,1:CUDA Advanced Topics,3:Physically-Based Simulation</scope>
    <featured_date>050201</featured_date>
    <files>
      <file>data\ref_fluidsGL.ppm</file>
    </files>
    <qatests>
       <qatest>-file=ref_fluidsGL.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">CUFFT Library</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library>cufft</library>
    <library os="linux">glut</library>
    <library os="linux">X11</library>
    <library os="linux">Xi</library>
    <library os="linux">Xmu</library>
    <library os="linux">GLEW</library>
    <library os="macosx" framework="true">GLUT</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="fluidsGL_kernels.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>fluidsGL.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA FFT Ocean Simulation</name>
    <group>CUDA</group>
    <description><![CDATA[This sample simulates an Ocean height field using CUFFT Library and renders the result using OpenGL.]]></description>
    <project_path>5_Simulations\oceanFFT</project_path>
    <screenshot_sm>doc\sshot_sm.png</screenshot_sm>
    <screenshot_md>doc\sshot_md.png</screenshot_md>
    <screenshot_lg>doc\sshot_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\oceanFFT.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CUFFT,Ocean,OpenGL,Height Field</keywords>
    <scope>1:CUDA Advanced Topics,2:Graphics Interop,3:Physically-Based Simulation</scope>
    <featured_date>050101</featured_date>
    <files>
        <file>data\ocean.frag</file>
        <file>data\ocean.vert</file>
        <file>data\reference.ppm</file>
        <file>data\ref_slopeShading.bin</file>
        <file>data\ref_spatialDomain.bin</file>
        <file>data\ref_slopeShading_sm13.bin</file>
        <file>data\ref_spatialDomain_sm13.bin</file>
    </files>
    <qatests>
        <qatest>-qatest</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <cudaapi>cufftPlan2d</cudaapi>
    <cudaapi>cufftExecR2C</cudaapi>
    <cudaapi>cufftExecC2R</cudaapi>
    <cudaapi>cufftDestroy</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">CUFFT Library</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>cufft</library>
    <library>GL</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>
    <library os="macosx" framework="true">GLUT</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="oceanFFT_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>oceanFFT.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>FFT-Based 2D Convolution</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how 2D convolutions with very large kernel sizes can be efficiently implemented using FFT transformations.]]></description>
    <project_path>3_Imaging\convolutionFFT2D</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\convolutionFFT2D.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CUFFT,DSP,non-separable convolution,finite impulse-response filter,Image Processing</keywords>
    <scope>1:CUDA Advanced Topics,2:Image Processing,2:Computer Vision</scope>
    <featured_date>041201</featured_date>
    <files>
    </files>
    <cudaapi>cufftPlan2d</cudaapi>
    <cudaapi>cufftExecR2C</cudaapi>
    <cudaapi>cufftExecC2R</cudaapi>
    <cudaapi>cufftDestroy</cudaapi>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">CUFFT Library</keyconcepts>

    <library>cufft</library>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="convolutionFFT2D.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Separable Convolution</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements a separable convolution filter of a 2D signal with a gaussian kernel.]]></description>
    <project_path>3_Imaging\convolutionSeparable</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\convolutionSeparable.pdf</whitepaper>
    <executable>Bin\win64\release\convolutionSeparable.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,DSP,separable convolution, finite impulse-response filter, Image Processing</keywords>
    <scope>1:CUDA Basic Topics, 1:Data-Parallel Algorithms, 3:Linear Algebra,2:Image Processing,2:Computer Vision</scope>
    <featured_date>041101</featured_date>
    <files></files>
    
    <keyconcepts level="basic">Image Processing</keyconcepts>
    <keyconcepts level="basic">Data Parallel Algorithms</keyconcepts>
    
    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="main.cpp"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Texture-based Separable Convolution</name>
    <group>CUDA</group>
    <description><![CDATA[Texture-based implementation of a separable 2D convolution with a gaussian kernel. Used for performance comparison against convolutionSeparable. ]]></description>
    <project_path>3_Imaging\convolutionTexture</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\convolutionTexture.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, DSP, separable convolution, finite impulse-response filter, Image Processing</keywords>
    <scope>1:CUDA Basic Topics,2:Texture,1:Data-Parallel Algorithms,3:Linear Algebra,2:Image Processing,2:Computer Vision</scope>
    <featured_date>041001</featured_date>
    <files></files>
    
    <keyconcepts level="basic">Image Processing</keyconcepts>
    <keyconcepts level="basic">Texture</keyconcepts>
    <keyconcepts level="basic">Data Parallel Algorithms</keyconcepts>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="convolutionTexture.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>threadFenceReduction</name>
    <group>CUDA</group>
    <description><![CDATA[This sample shows how to perform a reduction operation on an array of values using the thread Fence intrinsic.
to produce a single value in a single kernel (as opposed to two or more kernel calls as shown in the "reduction" SDK sample).  Single-pass reduction requires global atomic instructions (Compute Capability 1.1 or later) and the _threadfence() intrinsic (CUDA 2.2 or later).]]></description>
    <project_path>6_Advanced\threadFenceReduction</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\threadFenceReduction.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>reduction</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>040801</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="threadFenceReduction.cu"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>threadFenceReduction.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>CUDA Radix Sort (Thrust Library)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates a very fast and efficient parallel radix sort uses Thrust library (http://code.google.com/p/thrust/). The included RadixSort class can sort either key-value pairs (with float or unsigned integer keys) or keys only.  The optimized code in this sample (and also in reduction and scan) uses a technique known as warp-synchronous programming, which relies on the fact that within a warp of threads running on a CUDA GPU, all threads execute instructions synchronously. The code uses this to avoid __syncthreads() when threads within a warp are sharing data via __shared__ memory. It is important to note that for this to work correctly without race conditions on all GPUs, the shared memory used in these warp-synchronous expressions must be declared volatile. If it is not declared volatile, then in the absence of __syncthreads(), the compiler is free to delay stores to __shared__ memory and keep the data in registers (an optimization technique), which will result in incorrect execution.  So please heed the use of volatile in these samples and use it in the same way in any code you derive from them.]]></description>
    <project_path>6_Advanced\radixSortThrust</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>doc\readme.txt</userguide>
    <video></video>
    <whitepaper>doc\readme.txt</whitepaper>
    <executable>Bin\win64\release\radixSortThrust.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU,Sorting</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <featured_date>040701</featured_date>
    <files>
        <file>..\..\doc\Thrust_license.txt</file>
        <file>readme.txt</file>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="radixSortThrust.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>radixSortThrust.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
﻿<entry>
    <name>CUDA Sorting Networks</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements bitonic sort and odd-even merge sort (also known as Batcher's sort), algorithms belonging to the class of sorting networks. While generally subefficient, for large sequences compared to algorithms with better asymptotic algorithmic complexity (i.e. merge sort or radix sort), this may be the preferred algorithms of choice for sorting batches of short-sized to mid-sized (key, value) array pairs.
Refer to an excellent tutorial by H. W. Lang http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm
]]></description>
    <project_path>6_Advanced\sortingNetworks</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\sortingNetworks.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>sort,bitonic,CUDA</keywords>
    <scope>1:CUDA Basic Topics,1:Data-Parallel Algorithms</scope>
    <featured_date>040601</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="bitonicSort.cu"></nvcc-compiler>
    <nvcc-compiler file="oddEvenMergeSort.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
﻿<entry>
    <name>Merge Sort</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements a merge sort (also known as Batcher's sort), algorithms belonging to the class of sorting networks. While generally subefficient on large sequences compared to algorithms with better asymptotic algorithmic complexity (i.e. merge sort or radix sort), may be the algorithms of choice for sorting batches of short- to mid-sized (key, value) array pairs.
Refer to the excellent tutorial by H. W. Lang http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm
]]></description>
    <project_path>6_Advanced\mergeSort</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\mergeSort.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>sort,bitonic,CUDA</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms</scope>
    <featured_date>040601</featured_date>
    <files>
    </files>
    
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="mergeSort.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>main.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Binomial Option Pricing</name>
    <group>CUDA</group>
    <description><![CDATA[This sample evaluates fair call price for a given set of European options under binomial model.  This sample will also take advantage of double precision if a GTX 200 class GPU is present.]]></description>
    <project_path>4_Finance\binomialOptions</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\binomialOptions.pdf</whitepaper>
    <executable>Bin\win64\release\binomialOptions.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA, Computational Finance, option pricing, binomial tree</keywords>
    <scope>1:CUDA Advanced Topics, 3:Computational Finance</scope>
    <featured_date>040401</featured_date>
    <files>
    </files>
    <keyconcepts level="advanced">Computational Finance</keyconcepts>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="binomialOptions_SM10.cu"></nvcc-compiler>
    <nvcc-compiler file="binomialOptions_SM13.cu"></nvcc-compiler>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>binomialOptions.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

</entry>
<entry>
    <name>Black-Scholes Option Pricing</name>
    <group>CUDA</group>
    <description><![CDATA[This sample evaluates fair call and put prices for a given set of European options by Black-Scholes formula.]]></description>
    <project_path>4_Finance\BlackScholes</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\BlackScholes.pdf</whitepaper>
    <executable>Bin\win64\release\BlackScholes.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Computational Finance, option pricing, Black-Scholes</keywords>
    <scope>1:CUDA Basic Topics, 3:Computational Finance</scope>
    <featured_date>040301</featured_date>
    <files>
    </files>
    
    <keyconcepts level="basic">Computational Finance</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="BlackScholes.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>BlackScholes.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Niederreiter Quasirandom Sequence Generator</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements Niederreiter Quasirandom Sequence Generator and Inverse Cumulative Normal Distribution functions for the generation of Standard Normal Distributions. ]]></description>
    <project_path>4_Finance\quasirandomGenerator</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\quasirandomGenerator.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Advanced Topics,Quasi-Monte Carlo Integration,Computational Finance.</keywords>
    <scope>1:CUDA Advanced Topics,3:Computational Finance</scope>
    <featured_date>040201</featured_date>
    <files>
    </files>
    <keyconcepts level="advanced">Computational Finance</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="linux">X11</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="quasirandomGenerator_SM10.cu"></nvcc-compiler>
    <nvcc-compiler file="quasirandomGenerator_SM13.cu"></nvcc-compiler>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>quasirandomGenerator.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Monte Carlo Option Pricing with Multi-GPU support</name>
    <group>CUDA</group>
    <description><![CDATA[This sample evaluates fair call price for a given set of European options using the Monte Carlo approach, taking advantage of all CUDA-capable GPUs installed in the system. This sample use double precision hardware if a GTX 200 class GPU is present.  The sample also takes advantage of CUDA 4.0 capability to supporting using a single CPU thread to 
  control multiple GPUs]]></description>
    <project_path>4_Finance\MonteCarloMultiGPU</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\MonteCarlo.pdf</whitepaper>
    <executable>Bin\win64\release\MonteCarloMultiGPU.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,CURAND,Computational Finance,option pricing,Monte Carlo,multi-GPU support</keywords>
    <scope>1:CUDA Advanced Topics,1:Performance Strategies,3:Computational Finance</scope>
    <featured_date>031201</featured_date>
    <files>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="linux">X11</library>
    <library>curand</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="MonteCarlo_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>MonteCarloMultiGPU.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Mandelbrot</name>
    <group>CUDA</group>
    <description><![CDATA[This sample uses CUDA to compute and display the Mandelbrot or Julia sets interactively. It also illustrates the use of "double single" arithmetic to improve precision when zooming a long way into the pattern. This sample use double precision hardware if a GT200 class GPU is present.  Thanks to Mark Granger of NewTek who submitted this code sample.!]]></description>
    <project_path>2_Graphics\Mandelbrot</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.JPG</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\Mandelbrot.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>GPGPU</keywords>
    <scope>2:Graphics Interop,1:Data-Parallel Algorithms</scope>
    <featured_date>031001</featured_date>
    <files>
        <file>data\Mandelbrot_fp32.ppm</file>
        <file>data\Mandelbrot_fp64.ppm</file>
        <file>data\referenceJulia_fp32.ppm</file>
        <file>data\referenceJulia_fp64.ppm</file>
    </files>
    <qatests>
       <qatest>-mode=0 -file=Mandelbrot_fp32.ppm</qatest>
       <qatest>-mode=1 -file=referenceJulia_fp32.ppm</qatest>
    </qatests>

    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="Mandelbrot_kernel.cuh"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm13</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>Mandelbrot.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Particles</name>
    <group>CUDA</group>
    <description><![CDATA[This sample uses CUDA to simulate and visualize a large set of particles and their physical interaction.  Adding "-particles=<N>" to the command line will allow users to set # of particles for simulation.  This example implements a uniform grid data structure using either atomic operations or a fast radix sort from the Thrust library]]></description>
    <project_path>5_Simulations\particles</project_path>
    <screenshot_sm>doc\screenshot_sm.png</screenshot_sm>
    <screenshot_md>doc\screenshot_md.png</screenshot_md>
    <screenshot_lg>doc\screenshot_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\particles.pdf</whitepaper>
    <executable>Bin\win64\release\particles.exe</executable>
    <minspec>SM 1.1</minspec>
    <keywords>CUDA,GPGPU,OpenGL</keywords>
    <scope>2:Graphics Interop,3:Physically-Based Simulation</scope>
    <featured_date>030901</featured_date>
    <files>
        <file>..\..\doc\Thrust_license.txt</file>
        <file>data\ref_particles.ppm</file>
        <file>data\ref_particles.bin</file>
    </files>
    <qatests>
        <qatest>-file=ref_particles.bin</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>
    
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="particleSystem.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>particles.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Marching Cubes Isosurfaces</name>
    <group>CUDA</group>
    <description><![CDATA[This sample extracts a geometric isosurface from a volume dataset using the marching cubes algorithm. It uses the scan (prefix sum) function from the Thrust library to perform stream compaction. ]]></description>
    <project_path>2_Graphics\marchingCubes</project_path>
    <screenshot_sm>doc\screenshot_sm.png</screenshot_sm>
    <screenshot_md>doc\screenshot_md.png</screenshot_md>
    <screenshot_lg>doc\screenshot_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\marchingCubes.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>OpenGL, isosurface, marching cubes</keywords>
    <scope>2:Graphics Interop,1:CUDA Advanced Topics,3:Physically-Based Simulation</scope>
    <featured_date>030801</featured_date>
    <files>
        <file>..\..\doc\Thrust_license.txt</file>
        <file>data\Bucky.raw</file>
        <file>data\ref_march_cubes.ppm</file>
        <file>data\posArray.bin</file>
        <file>data\normalArray.bin</file>
        <file>data\compVoxelArray.bin</file>
    </files>
    <qatests>
      <qatest>-dump=0 -file=posArray.bin</qatest>
      <qatest>-dump=1 -file=normalArray.bin</qatest>
      <qatest>-dump=2 -file=compVoxelArray.bin</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">OpenGL Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Vertex Buffers</keyconcepts>
    <keyconcepts level="advanced">3D Graphics</keyconcepts>
    <keyconcepts level="advanced">Physically Based Simulation</keyconcepts>
  
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="marchingCubes_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>marchingCubes.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Volume Rendering with 3D Textures</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates basic volume rendering using 3D Textures.]]></description>
    <project_path>2_Graphics\volumeRender</project_path>
    <screenshot_sm>doc\sshot_sm.JPG</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.JPG</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\volumeRender.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>Volume Rendering</keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Graphics Interop,2:Image Processing,3:Volume Processing</scope>
    <featured_date>030701</featured_date>
    <files>
        <file>data\Bucky.raw</file>
        <file>data\ref_volume.ppm</file>
    </files>
    <qatests>
      <qatest>-file=ref_volume.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">3D Textures</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="volumeRender_kernel.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>volumeRender.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
﻿<entry>
    <name>CUDA N-Body Simulation</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates efficient all-pairs simulation of a gravitational n-body simulation in CUDA.  This sample accompanies the GPU Gems 3 chapter "Fast N-Body Simulation with CUDA".  With CUDA 5.5, performance on Tesla K20c has increased to over 1.8TFLOP/s single precision.  Double Performance has also improved on all Kepler and Fermi GPU architectures as well.  Starting in CUDA 4.0, the nBody sample has been updated to take advantage of new features to easily scale the n-body simulation across multiple GPUs in a single PC.  Adding "-numbodies=<bodies>" to the command line will allow users to set # of bodies for simulation.  Adding “-numdevices=<N>” to the command line option will cause the sample to use N devices (if available) for simulation.  In this mode, the position and velocity data for all bodies are read from system memory using “zero copy” rather than from device memory.  For a small number of devices (4 or fewer) and a large enough number of bodies, bandwidth is not a bottleneck so we can achieve strong scaling across these devices.
]]></description>
    <project_path>5_Simulations\nbody</project_path>
    <screenshot_sm>doc\screenshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\screenshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\screenshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc/nbody_gems3_ch31.pdf</whitepaper>
    <executable>Bin\win64\release\nbody.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,GPGPU,n-body,simulation,astrophysics,opengl</keywords>
    <scope>2:Graphics Interop,1:CUDA Advanced Topics,1:Data-Parallel Algorithms,3:Physically-Based Simulation</scope>
    <featured_date>030601</featured_date>
    <files>
       <file>./galaxy_20K.bin</file>
       <file>./CMakeLists.txt</file>
    </files>
	<qatests>
	    <qatest>-benchmark -compare -cpu</qatest>
	</qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="bodysystemcuda.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>nbody.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Smoke Particles</name>
    <group>CUDA</group>
    <description><![CDATA[Smoke simulation with volumetric shadows using half-angle slicing technique. Uses CUDA for procedural simulation, Thrust Library for sorting algorithms, and OpenGL for graphics rendering. ]]></description>
    <project_path>5_Simulations\smokeParticles</project_path>
    <screenshot_sm>doc\screenshot_sm.png</screenshot_sm>
    <screenshot_md>doc\screenshot_md.png</screenshot_md>
    <screenshot_lg>doc\screenshot_lg.png</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\smokeParticles.pdf</whitepaper>
    <executable>Bin\win64\release\smokeParticles.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,GPGPU,simulation,particles,OpenGL</keywords>
    <scope>2:Graphics Interop,2:Texture,3:Physically-Based Simulation</scope>
    <featured_date>030501</featured_date>
    <files>
      <file>..\..\doc\Thrust_license.txt</file>
      <file>data\floortile.ppm</file>
      <file>data\smokeParticles_ref.ppm</file>
      <file>data\ref_smokePart_pos.bin</file>
      <file>data\ref_smokePart_vel.bin</file>
    </files>
    <qatests>
        <qatest>-qatest</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    <keyconcepts level="advanced">Graphics Interop</keyconcepts>
    <keyconcepts level="advanced">Data Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Physically-Based Simulation</keyconcepts>
    
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="ParticleSystem.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>particleDemo.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Sobol Quasirandom Number Generator</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements Sobol Quasirandom Sequence Generator. ]]></description>
    <project_path>4_Finance\SobolQRNG</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\sobolQRNG.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Advanced Topics,Quasi-Monte Carlo Integration,Computational Finance</keywords>
    <scope>1:CUDA Advanced Topics,3:Computational Finance</scope>
    <featured_date>030401</featured_date>
    <files>
    </files>
    <keyconcepts level="advanced">Computational Finance</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="linux">X11</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="sobol_gpu.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>sobel.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Matrix Multiplication (CUDA Driver API Version)</name>
    <group>CUDA</group>
    <description><![CDATA[This sample implements matrix multiplication and uses the new CUDA 4.0 kernel launch Driver API.
It has been written for clarity of exposition to illustrate various CUDA programming principles, not with the goal of providing the most performant generic kernel for matrix multiplication.
CUBLAS provides high-performance matrix multiplication.]]></description>
    <project_path>0_Simple\matrixMulDrv</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable>Bin\win64\release\matrixMulDrv.exe</executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,matrix multiply</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <featured_date>010201</featured_date>
    <files>
      <file>data\matrixMul_kernel32.ptx</file>
      <file>data\matrixMul_kernel64.ptx</file>
    </files>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
	<cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemcpyHtoD</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>
    <keyconcepts level="basic">Matrix Multiply</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>
	
    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="matrixMul_kernel.cu">-o matrixMul_kernel.ptx -ptx matrixMul_kernel.cu</nvcc-compiler>

    <!-- These options will be passed to GCC compiler as is and for all files -->
    <gcc-compiler os="darwin" arch="i686"   file="matrixMulDrv.cpp">-arch i686</gcc-compiler>
    <gcc-compiler os="darwin" arch="x86_64" file="matrixMulDrv.cpp">-arch x86_64</gcc-compiler>
    <gcc-compiler os="linux"  arch="i686"   file="matrixMulDrv.cpp">-m32</gcc-compiler>
    <gcc-compiler os="linux"  arch="x86_64" file="matrixMulDrv.cpp">-m64</gcc-compiler>
    <gcc-compiler file="matrixMulDrv.cpp">-o matrixMulDrv.o -c matrixMulDrv.cpp</gcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>matrixMulDrv.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
<entry>
    <name>simpleMPI</name>
    <group>CUDA</group>
    <description><![CDATA[Simple example demonstrating how to use MPI in combination with CUDA.  This executable is not pre-built with the SDK installer.]]></description>
    <project_path>0_Simple\simpleMPI</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable></executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,MPI,cluster</keywords>
    <scope>3:Linear Algebra,1:CUDA Systems Integration</scope>
    <featured_date>100202</featured_date>
    <files>
    </files>
    <cudaapi>cudaMallco</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">CUDA Systems Integration</keyconcepts>
    <keyconcepts level="basic">MPI</keyconcepts>
    <keyconcepts level="basic">Multithreading</keyconcepts>
	
    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="simpleMPI.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>simpleMPI.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

	<!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
<entry>
    <name>Excel 2010 CUDA Integration Example</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to integrate Excel 2010 with CUDA using array formulas.  This plug-in depends on the Microsoft Excel 2010 Developer Kit, which can be downloaded from the Microsoft Developer website.  This sample is not pre-built with the CUDA SDK.]]></description>
    <project_path>4_Finance\ExcelCUDA\ExcelCUDA2010</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable></executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Advanced Topics,Excel Integration,Computational Finance</keywords>
    <scope>1:CUDA Advanced Topics,3:Computational Finance</scope>
    <featured_date>090116</featured_date>
    <files>
      <file>..\\doc\ExcelCUDA.xlsm</file>
      <file>..\XLLSDK2010\DOC\Excel14XLLSDK.chm</file>
      <file>..\XLLSDK2010\INCLUDE\FRAMEWRK.H</file>
      <file>..\XLLSDK2010\INCLUDE\IntlMap.xlsx</file>
      <file>..\XLLSDK2010\INCLUDE\ReadMe.txt</file>
      <file>..\XLLSDK2010\INCLUDE\XLCALL.H</file>
      <file>..\XLLSDK2010\LIB\frmwrk32.lib</file>
      <file>..\XLLSDK2010\LIB\XLCALL32.LIB</file>
      <file>..\XLLSDK2010\LIB\x64\frmwrk32.lib</file>
      <file>..\XLLSDK2010\LIB\x64\XLCALL32.LIB</file>
      <file>..\XLLSDK2010\SRC\ReadMe.txt</file>
      <file>..\XLLSDK2010\SRC\XLCALL.CPP</file>
      <file>..\XLLSDK2010\ExcelSDK_eula.rtf</file>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library os="macosx" framework="true">GL</library>
    <library os="linux">X11</library>
    <library os="linux" arch="x86_64">GLEW_x86_64</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="ExcelCUDA_kernel.cu"></nvcc-compiler>
    <nvcc-compiler file="ExcelCUDA_wrapper.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>ExcelCUDA.c</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>Excel 2007 CUDA Integration Example</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to integrate Excel 2007 with CUDA using array formulas.  This plug-in depends on the Microsoft Excel Developer Kit.  This sample is not pre-built with the CUDA SDK.]]></description>
    <project_path>4_Finance\ExcelCUDA\ExcelCUDA2007</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable></executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,Advanced Topics,Excel Integration,Computational Finance</keywords>
    <scope>1:CUDA Advanced Topics,3:Computational Finance</scope>
    <featured_date>090116</featured_date>
    <files>
      <file>..\doc\ExcelCUDA.xlsm</file>
      <file>..\XLLSDK2007\doc\Excel2007XLLSDK.chm</file>
      <file>..\XLLSDK2007\include\FRAMEWRK.H</file>
      <file>..\XLLSDK2007\include\intlmap.xlsx</file>
      <file>..\XLLSDK2007\include\README.TXT</file>
      <file>..\XLLSDK2007\include\xlcall.h</file>
      <file>..\XLLSDK2007\lib\frmwrk32.lib</file>
      <file>..\XLLSDK2007\lib\xlcall32.lib</file>
      <file>..\XLLSDK2007\src\README.TXT</file>
      <file>..\XLLSDK2007\src\xlcall.cpp</file>
      <file>..\XLLSDK2007\ExcelSDK_eula.rtf</file>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library os="macosx" framework="true">GL</library>
    <library os="linux">X11</library>
    <library os="linux" arch="x86_64">GLEW_x86_64</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="ExcelCUDA_kernel.cu"></nvcc-compiler>
    <nvcc-compiler file="ExcelCUDA_wrapper.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>ExcelCUDA.c</primary-file>
	
    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
</entry>
<entry>
    <name>cudaOpenMP</name>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to use OpenMP API to write an application for multiple GPUs.  This executable is not pre-built with the SDK installer.]]></description>
    <project_path>0_Simple\cudaOpenMP</project_path>
    <screenshot_sm></screenshot_sm>
    <screenshot_md></screenshot_md>
    <screenshot_lg></screenshot_lg>
    <userguide>readme.txt</userguide>
    <video></video>
    <whitepaper></whitepaper>
    <executable></executable>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,OpenMP,cluster,multi-GPU Support</keywords>
    <scope>1:CUDA Basic Topics,1:CUDA Systems Integration</scope>
    <featured_date>070401</featured_date>
    <files>
    </files>
    <cudaapi>cudaMalloc</cudaapi>
    <cudaapi>cudaFree</cudaapi>
    <cudaapi>cudaMemcpy</cudaapi>
    
    <keyconcepts level="basic">CUDA Systems Integration</keyconcepts>
    <keyconcepts level="basic">OpenMP</keyconcepts>
	<keyconcepts level="basic">Multithreading</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="Win32">$(CUDA_PATH)/lib/Win32</library-path>
    <library-path os="windows" arch="x64">$(CUDA_PATH)/lib/x64</library-path>
    <library-path os="linux" arch="i686">/usr/local/cuda/lib</library-path>
    <library-path os="linux" arch="x86_64">/usr/local/cuda/lib64</library-path>
    <library-path os="darwin">/usr/local/cuda/lib</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler></nvcc-compiler>
    <nvcc-compiler file="cudaOpenMP.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>cudaOpenMP.cu</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

	<no-nsight-eclipse />
</entry>
</entries>